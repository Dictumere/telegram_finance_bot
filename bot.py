from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, ConversationHandler, MessageHandler, filters
import os
from sheets import get_sheet, add_expense, get_summary
from dotenv import load_dotenv
load_dotenv()


API_TELEGRAM_TOKEN = os.environ['API_TELEGRAM_TOKEN']
SELECT_GROUP, SELECT_CATEGORY, ENTER_AMOUNT, ENTER_DAY = range(4)
CATEGORIES = {
    "–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã": [
        "–ì–æ—Ä–æ–¥—Å–∫–æ–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç",
        "–ü—Ä–æ–¥—É–∫—Ç—ã –ø–∏—Ç–∞–Ω–∏—è",
        "–ú–æ–±–∏–ª—å–Ω–∞—è —Å–≤—è–∑—å –∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç",
        "–ó–¥–æ—Ä–æ–≤—å–µ",
        "–ü–æ–¥–ø–∏—Å–∫–∏",
        "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π",
        "–û–±—É—á–µ–Ω–∏–µ-–ë–ê"
    ],
    "–û—Ç–¥—ã—Ö –∏ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏–µ": [
        "–°–ø–æ—Ä—Ç",
        "–¢–∞–∫—Å–∏",
        "–ï–¥–∞ (—Ñ–∞—Å—Ç—Ñ—É–¥, —Å–ª–∞–¥–æ—Å—Ç–∏ –∏ —Ç–¥)",
        "–ü—Ä–æ—á–µ–µ"
    ],
    "–ù–∞–∫–æ–ø–ª–µ–Ω–∏–µ –∏ –∫—Ä–µ–¥–∏—Ç—ã": [
        "–ù–æ—É—Ç–±—É–∫",
        "–û–±—É—á–µ–Ω–∏–µ-SMM",
        "–î–æ–ª–≥",
        "–ö–æ–ø–∏–ª–∫–∞"
    ]
}


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —É—á—ë—Ç–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤ üí∏\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ\n"
        "/help ‚Äî —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
        "/add ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞—Ç—É\n"
        "/test ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ç–∞–±–ª–∏—Ü–µ"
    )
    await update.message.reply_text(text)


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ö–æ–º–∞–Ω–¥—ã: /start /help /add /test")


# üîπ –í–æ—Ç —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ Google Sheets
async def test_sheet(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        sheet = get_sheet("–§–∏–Ω–∞–Ω—Å—ã")  # –£–∫–∞–∂–∏ —Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã!
        await update.message.reply_text("‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —Ç–∞–±–ª–∏—Ü–µ!")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")


async def add_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    reply_keyboard = [
        ["–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã"],
        ["–û—Ç–¥—ã—Ö –∏ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏–µ"],
        ["–ù–∞–∫–æ–ø–ª–µ–Ω–∏–µ –∏ –∫—Ä–µ–¥–∏—Ç—ã"]
    ]
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏ –≥—Ä—É–ø–ø—É —Ä–∞—Å—Ö–æ–¥–æ–≤:",
        reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True, resize_keyboard=True)
    )
    return SELECT_GROUP


async def select_group(update: Update, context: ContextTypes.DEFAULT_TYPE):
    group = update.message.text
    context.user_data["group"] = group

    categories = CATEGORIES.get(group)
    if not categories:
        await update.message.reply_text("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
        return ConversationHandler.END

    reply_keyboard = [[cat] for cat in categories]  # –¥–µ–ª–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ –æ–¥–Ω–æ–π –≤ —Å—Ç—Ä–æ–∫–µ
    await update.message.reply_text(
        "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True, resize_keyboard=True)
    )
    return SELECT_CATEGORY


async def select_category(update: Update, context: ContextTypes.DEFAULT_TYPE):
    category = update.message.text
    context.user_data["category"] = category

    await update.message.reply_text(
        f"–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å—É–º–º—É —Ç—Ä–∞—Ç—ã (–≤ —Ä—É–±–ª—è—Ö):",
        reply_markup=ReplyKeyboardRemove()
    )
    return ENTER_AMOUNT


async def enter_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        amount = float(update.message.text.replace(",", "."))  # –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∑–∞–ø—è—Ç—ã—Ö
        context.user_data["amount"] = amount
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
        return ENTER_AMOUNT

    await update.message.reply_text("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ –º–µ—Å—è—Ü–∞ (–æ—Ç 26 –¥–æ 25):")
    return ENTER_DAY


async def enter_day(update: Update, context: ContextTypes.DEFAULT_TYPE):
    day = update.message.text
    context.user_data["day"] = day

    # –í—ã–≤–æ–¥–∏–º –≤—Å—ë, —á—Ç–æ —Å–æ–±—Ä–∞–ª–∏
    text = (
        f"‚úÖ –î–æ–±–∞–≤–∏–º –∑–∞–ø–∏—Å—å:\n"
        f"–ì—Ä—É–ø–ø–∞: {context.user_data['group']}\n"
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {context.user_data['category']}\n"
        f"–°—É–º–º–∞: {context.user_data['amount']}‚ÇΩ\n"
        f"–ß–∏—Å–ª–æ –º–µ—Å—è—Ü–∞: {context.user_data['day']}"
    )
    await update.message.reply_text(text)
    await update.message.reply_text("–ó–∞–ø–∏—Å—ã–≤–∞—é –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü—É...")

    try:
        add_expense(
            sheet_title="–§–∏–Ω–∞–Ω—Å—ã",           # –ù–∞–∑–≤–∞–Ω–∏–µ Google Sheets
            month_sheet="–ê–ø—Ä–µ–ª—å",            # –ù–∞–∑–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∞
            category=context.user_data["category"],
            day=day,
            amount=context.user_data["amount"]
        )
        await update.message.reply_text("‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–æ –≤ —Ç–∞–±–ª–∏—Ü—É!")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏: {e}")
    try:
        total, group_rest, daily = get_summary(
            sheet_title="–§–∏–Ω–∞–Ω—Å—ã",
            month_sheet="–ê–ø—Ä–µ–ª—å",
            group=context.user_data["group"],
            day=day
        )

        await update.message.reply_text(
            f"‚úÖ –¢—Ä–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é {context.user_data['category']} –∑–∞ {day} —á–∏—Å–ª–æ.\n\n"
            f"üí∞ –û–±—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫: {total}‚ÇΩ\n"
            f"üì¶ –û—Å—Ç–∞—Ç–æ–∫ –ø–æ –≥—Ä—É–ø–ø–µ: {group_rest}‚ÇΩ\n"
            f"üìÖ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ –∑–∞ –¥–µ–Ω—å: {daily}‚ÇΩ"
        )
    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è –ó–∞–ø–∏—Å—å –ø—Ä–æ—à–ª–∞, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: {e}")

    return ConversationHandler.END


def main():
    app = ApplicationBuilder().token(API_TELEGRAM_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("test", test_sheet))  # –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("add", add_start)],
        states={
            SELECT_GROUP: [MessageHandler(filters.TEXT & ~filters.COMMAND, select_group)],
            SELECT_CATEGORY: [MessageHandler(filters.TEXT & ~filters.COMMAND, select_category)],
            ENTER_AMOUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, enter_amount)],
            ENTER_DAY: [MessageHandler(filters.TEXT & ~filters.COMMAND, enter_day)],

            # –æ—Å—Ç–∞–ª—å–Ω—ã–µ —à–∞–≥–∏ –¥–æ–±–∞–≤–∏–º –ø–æ–∑–∂–µ
        },
        fallbacks=[]
    )
    app.add_handler(conv_handler)

    app.run_polling()


if __name__ == "__main__":
    main()
